/// Add the zxcvbn node library: git://github.com/buttercoin/node-zxcvbn.git#master

// Example of integration with zxcvbn (password strength estimation library)
var assert = require('assert');
var format = require('util').format;

var zxcvbn = require('zxcvbn');

var PasswordPolicy = require('../..').PasswordPolicy;

// zxcvbn rule
function ZxcvbnRule() {
}

ZxcvbnRule.prototype = {};

ZxcvbnRule.prototype.validate = function (options) {
  if (!options) { throw new Error('options should be an object'); }
  if (typeof options.score !== 'number') { throw new Error('score should be Number'); }
  if (options.score !== (options.score | 0)) { throw new Error('score should be Integer'); }
};

ZxcvbnRule.prototype.assert = function (options, password) {
  if (!password) { return false; }
  if (typeof password !== 'string') { throw new Error('password should be string'); }

  var result = zxcvbn(password);

  // zxcvbn score should be at least equal to options.score
  return result.score >= options.score;
};

ZxcvbnRule.prototype.explain = function (options) {
  return {
    // identifier rule (to make i18n easier)
    code: 'zxcvbnScore',
    message: 'Password should have a zxcvbn cracking score of at least %d out of 5.',
    format: [options.score]
  };
};

ZxcvbnRule.prototype.missing = function (options, password) {
  var explain = this.explain(options);
  explain.verified = this.assert(options, password);
  return explain;
};

var zxcvbnPolicy = new PasswordPolicy({zxcvbn: {score: 3}}, {zxcvbn: new ZxcvbnRule()});

assert.equal(false, zxcvbnPolicy.check('zxcvbn'));
assert.equal(false, zxcvbnPolicy.check('helloHELLO123'));
assert.equal(true, zxcvbnPolicy.check('some_ _hard _pwd'));

var missing = zxcvbnPolicy.missing('zxcvbn').rules[0];
var msg = format(missing.message, missing.format[0]);

assert.equal(
  'Password should have a zxcvbn cracking score of at least 3 out of 5.',
  msg
);

